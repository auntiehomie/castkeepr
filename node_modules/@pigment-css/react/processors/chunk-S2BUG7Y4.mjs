import { slugify } from '@wyw-in-js/shared';
import { BaseProcessor as BaseProcessor$1, toValidCSSIdentifier, buildSlug } from '@wyw-in-js/processor-utils';

/**
  * @pigment-css/react v0.0.30
  *
  * @license MIT
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
 
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var BaseProcessor = class extends BaseProcessor$1 {
  constructor() {
    super(...arguments);
    this.variableIdx = 0;
  }
  // Implementation taken from Linaria - https://github.com/callstack/linaria/blob/master/packages/react/src/processors/styled.ts#L284
  getCustomVariableId(cssKey, source, hasUnit) {
    const context = this.getVariableContext(cssKey, source, hasUnit);
    const customSlugFn = this.options.variableNameSlug;
    if (!customSlugFn) {
      return toValidCSSIdentifier(`${this.slug}-${context.index}`);
    }
    return typeof customSlugFn === "function" ? customSlugFn(context) : buildSlug(customSlugFn, __spreadValues({}, context));
  }
  // Implementation taken from Linaria - https://github.com/callstack/linaria/blob/master/packages/react/src/processors/styled.ts#L362
  getVariableContext(cssKey, source, hasUnit) {
    const getIndex = () => {
      const id = this.variableIdx;
      this.variableIdx += 1;
      return id;
    };
    return {
      componentName: this.displayName,
      componentSlug: this.slug,
      get index() {
        return getIndex();
      },
      precedingCss: cssKey,
      processor: this.constructor.name,
      source: "",
      unit: "",
      valueSlug: slugify(`${source}${hasUnit}`)
    };
  }
  getImportPath() {
    const { packageMap } = this.options;
    const { source: originalSource } = this.tagSource;
    const transformedImport = packageMap == null ? void 0 : packageMap[originalSource];
    return transformedImport != null ? transformedImport : `${"@pigment-css/react"}`;
  }
};

export { BaseProcessor, __spreadProps, __spreadValues };
//# sourceMappingURL=chunk-S2BUG7Y4.mjs.map
//# sourceMappingURL=chunk-S2BUG7Y4.mjs.map