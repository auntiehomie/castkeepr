import { css, cache } from './chunk-C45XP3YA.mjs';
import { BaseProcessor } from './chunk-S2BUG7Y4.mjs';
import { validateParams } from '@wyw-in-js/processor-utils';
import { ValueType } from '@wyw-in-js/shared';
import deepMerge from 'lodash/merge';

/**
  * @pigment-css/react v0.0.30
  *
  * @license MIT
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
 
var CssProcessor = class extends BaseProcessor {
  constructor(params, ...args) {
    if (params.length < 2) {
      throw BaseProcessor.SKIP;
    }
    super([params[0]], ...args);
    validateParams(
      params,
      ["callee", ["call", "template"]],
      `Invalid use of ${this.tagSource.imported} tag.`
    );
    const [, callParams] = params;
    if (callParams[0] === "call") {
      const [, ...callArgs] = callParams;
      this.dependencies.push(...callArgs);
    } else if (callParams[0] === "template") {
      callParams[1].forEach((element) => {
        if ("kind" in element && element.kind !== ValueType.CONST) {
          this.dependencies.push(element);
        }
      });
    }
    this.callParam = callParams;
  }
  build(values) {
    if (this.artifacts.length > 0) {
      throw new Error(`MUI: "${this.tagSource.imported}" is already built`);
    }
    const [callType] = this.callParam;
    if (callType === "template") {
      this.handleTemplate(this.callParam, values);
    } else {
      this.handleCall(this.callParam, values);
    }
  }
  handleTemplate([, callArgs], values) {
    const templateStrs = [];
    templateStrs.raw = [];
    const templateExpressions = [];
    const { themeArgs } = this.options;
    callArgs.forEach((item) => {
      if ("kind" in item) {
        switch (item.kind) {
          case ValueType.FUNCTION: {
            const value = values.get(item.ex.name);
            templateExpressions.push(value(themeArgs));
            break;
          }
          case ValueType.CONST:
            templateExpressions.push(item.value);
            break;
          case ValueType.LAZY: {
            const evaluatedValue = values.get(item.ex.name);
            if (typeof evaluatedValue === "function") {
              templateExpressions.push(evaluatedValue(themeArgs));
            } else {
              templateExpressions.push(evaluatedValue);
            }
            break;
          }
        }
      } else if (item.type === "TemplateElement") {
        templateStrs.push(item.value.cooked);
        templateStrs.raw.push(item.value.raw);
      }
    });
    this.generateArtifacts(templateStrs, ...templateExpressions);
  }
  generateArtifacts(styleObjOrTaggged, ...args) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
    const cssClassName = css(styleObjOrTaggged, ...args);
    const cssText = cache.registered[cssClassName];
    const rules = {
      [this.asSelector]: {
        className: this.className,
        cssText,
        displayName: this.displayName,
        start: (_b = (_a = this.location) == null ? void 0 : _a.start) != null ? _b : null
      }
    };
    const sourceMapReplacements = [
      {
        length: cssText.length,
        original: {
          start: {
            column: (_d = (_c = this.location) == null ? void 0 : _c.start.column) != null ? _d : 0,
            line: (_f = (_e = this.location) == null ? void 0 : _e.start.line) != null ? _f : 0
          },
          end: {
            column: (_h = (_g = this.location) == null ? void 0 : _g.end.column) != null ? _h : 0,
            line: (_j = (_i = this.location) == null ? void 0 : _i.end.line) != null ? _j : 0
          }
        }
      }
    ];
    this.artifacts.push(["css", [rules, sourceMapReplacements]]);
  }
  handleCall([, ...callArgs], values) {
    const mergedStyleObj = {};
    callArgs.forEach((callArg) => {
      let styleObj;
      if (callArg.kind === ValueType.LAZY) {
        styleObj = values.get(callArg.ex.name);
      } else if (callArg.kind === ValueType.FUNCTION) {
        const { themeArgs } = this.options;
        const value = values.get(callArg.ex.name);
        styleObj = value(themeArgs);
      }
      if (styleObj) {
        deepMerge(mergedStyleObj, styleObj);
      }
    });
    if (Object.keys(mergedStyleObj).length > 0) {
      this.generateArtifacts(mergedStyleObj);
    }
  }
  doEvaltimeReplacement() {
    this.replacer(this.value, false);
  }
  doRuntimeReplacement() {
    this.doEvaltimeReplacement();
  }
  get asSelector() {
    return `.${this.className}`;
  }
  get value() {
    return this.astService.stringLiteral(this.className);
  }
};

export { CssProcessor };
//# sourceMappingURL=css.mjs.map
//# sourceMappingURL=css.mjs.map