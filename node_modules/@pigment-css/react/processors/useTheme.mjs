import { BaseProcessor } from './chunk-S2BUG7Y4.mjs';
import { validateParams } from '@wyw-in-js/processor-utils';

/**
  * @pigment-css/react v0.0.30
  *
  * @license MIT
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
 
var UseThemeProcessor = class extends BaseProcessor {
  constructor(params, ...args) {
    super([params[0]], ...args);
    if (params.length === 1) {
      throw BaseProcessor.SKIP;
    }
    validateParams(params, ["callee", ["call"]], `Invalid use of ${this.tagSource.imported} tag.`);
  }
  build() {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
    const cssText = "/* */";
    const rules = {
      [this.asSelector]: {
        className: this.className,
        cssText,
        displayName: this.displayName,
        start: (_b = (_a = this.location) == null ? void 0 : _a.start) != null ? _b : null
      }
    };
    const sourceMapReplacements = [
      {
        length: cssText.length,
        original: {
          start: {
            column: (_d = (_c = this.location) == null ? void 0 : _c.start.column) != null ? _d : 0,
            line: (_f = (_e = this.location) == null ? void 0 : _e.start.line) != null ? _f : 0
          },
          end: {
            column: (_h = (_g = this.location) == null ? void 0 : _g.end.column) != null ? _h : 0,
            line: (_j = (_i = this.location) == null ? void 0 : _i.end.line) != null ? _j : 0
          }
        }
      }
    ];
    this.artifacts.push(["css", [rules, sourceMapReplacements]]);
  }
  doEvaltimeReplacement() {
    this.replacer(this.value, false);
  }
  doRuntimeReplacement() {
    const t = this.astService;
    const themeIdentifier = t.addDefaultImport(`${this.getImportPath()}/theme`);
    this.replacer(themeIdentifier, false);
  }
  get asSelector() {
    return this.className;
  }
  get value() {
    return this.astService.nullLiteral();
  }
};

export { UseThemeProcessor };
//# sourceMappingURL=useTheme.mjs.map
//# sourceMappingURL=useTheme.mjs.map