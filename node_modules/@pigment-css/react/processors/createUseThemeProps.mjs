import { valueToLiteral } from './chunk-NCMSTZSE.mjs';
import { BaseProcessor } from './chunk-S2BUG7Y4.mjs';
import { validateParams } from '@wyw-in-js/processor-utils';

/**
  * @pigment-css/react v0.0.30
  *
  * @license MIT
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
 
var CreateUseThemePropsProcessor = class extends BaseProcessor {
  constructor(params, ...args) {
    if (params.length > 2) {
      throw BaseProcessor.SKIP;
    }
    validateParams(params, ["callee", "call"], "Invalid use of createUseThemeProps tag.");
    super([params[0]], ...args);
    const [, callParam] = params;
    const [, callArg] = callParam;
    if (!callArg || callArg.ex.type !== "StringLiteral") {
      throw new Error(
        `Invalid usage of \`createUseThemeProps\` tag, expected one string literal argument but got ${callArg == null ? void 0 : callArg.ex.type}.`
      );
    }
    this.componentName = callArg.ex.value;
  }
  // eslint-disable-next-line class-methods-use-this
  build() {
  }
  doEvaltimeReplacement() {
    this.replacer(this.value, false);
  }
  get value() {
    return this.astService.nullLiteral();
  }
  doRuntimeReplacement() {
    var _a, _b;
    const t = this.astService;
    const { themeArgs: { theme } = {} } = this.options;
    const useThemePropsImportIdentifier = t.addNamedImport(
      this.tagSource.imported,
      this.getImportPath()
    );
    let replacement = t.stringLiteral(this.componentName);
    if ((_b = (_a = theme == null ? void 0 : theme.components) == null ? void 0 : _a[this.componentName]) == null ? void 0 : _b.defaultProps) {
      replacement = valueToLiteral(theme.components[this.componentName].defaultProps);
    }
    this.replacer(t.callExpression(useThemePropsImportIdentifier, [replacement]), true);
  }
  get asSelector() {
    return `.${this.className}`;
  }
};

export { CreateUseThemePropsProcessor };
//# sourceMappingURL=createUseThemeProps.mjs.map
//# sourceMappingURL=createUseThemeProps.mjs.map