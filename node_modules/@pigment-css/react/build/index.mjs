export { styled } from './chunk-AFZBAV6Q.mjs';
export { css } from './chunk-FV633G5R.mjs';
export { atomics, generateAtomics } from './chunk-N7I2UQMS.mjs';
import { __spreadValues } from './chunk-L25ZX2YK.mjs';
import { internal_resolveProps } from '@mui/utils';

/**
  * @pigment-css/react v0.0.30
  *
  * @license MIT
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
 

// src/sx.js
function sx(transformedSx, { className, style }) {
  let sxClass = "";
  let sxVars = {};
  function iterateSx(element) {
    if (element) {
      sxClass += `${typeof element === "string" ? element : element.className} `;
      sxVars = __spreadValues(__spreadValues({}, sxVars), element && typeof element !== "string" ? element.vars : void 0);
    }
  }
  if (Array.isArray(transformedSx)) {
    transformedSx.forEach((element) => {
      iterateSx(element);
    });
  } else {
    iterateSx(transformedSx);
  }
  const varStyles = {};
  if (sxVars) {
    Object.entries(sxVars).forEach(([cssVariable, [value, isUnitLess]]) => {
      if (typeof value === "string" || isUnitLess) {
        varStyles[`--${cssVariable}`] = value;
      } else {
        varStyles[`--${cssVariable}`] = `${value}px`;
      }
    });
  }
  return {
    className: `${sxClass.trim()}${className ? ` ${className}` : ""}`,
    style: __spreadValues(__spreadValues({}, varStyles), style)
  };
}

// src/keyframes.js
function keyframes() {
  if (typeof __wyw_dynamic_import !== "undefined") {
    return;
  }
  throw new Error(
    `${"@pigment-css/react"}: You were trying to call "keyframes" function without configuring your bundler. Make sure to install the bundler specific plugin and use it. @pigment-css/vite-plugin for Vite integration or @pigment-css/nextjs-plugin for Next.js integration.`
  );
}
function createUseThemeProps(nameOrDefaultProps) {
  return function useThemeProps({ props }) {
    if (typeof nameOrDefaultProps === "string") {
      return props;
    }
    const defaultProps = nameOrDefaultProps;
    const output = __spreadValues({}, props);
    Object.keys(defaultProps).forEach((propName) => {
      if (propName.toString().match(/^(components|slots)$/)) {
        output[propName] = __spreadValues(__spreadValues({}, defaultProps[propName]), output[propName]);
      } else if (propName.toString().match(/^(componentsProps|slotProps)$/)) {
        const defaultSlotProps = defaultProps[propName] || {};
        const slotProps = props[propName];
        output[propName] = {};
        if (!slotProps || !Object.keys(slotProps)) {
          output[propName] = defaultSlotProps;
        } else if (!defaultSlotProps || !Object.keys(defaultSlotProps)) {
          output[propName] = slotProps;
        } else {
          output[propName] = __spreadValues({}, slotProps);
          Object.keys(defaultSlotProps).forEach((slotPropName) => {
            output[propName][slotPropName] = internal_resolveProps(
              defaultSlotProps[slotPropName],
              slotProps[slotPropName]
            );
          });
        }
      } else if (output[propName] === void 0) {
        output[propName] = defaultProps[propName];
      }
    });
    return output;
  };
}

// src/createExtendSxProp.js
function extendSxProp(props) {
  return __spreadValues({}, props);
}
function createExtendSxProp() {
  return extendSxProp;
}

// src/useTheme.js
function useTheme() {
  if (typeof __wyw_dynamic_import !== "undefined") {
    return;
  }
  throw new Error(
    `${"@pigment-css/react"}: You were trying to call "useTheme" function without configuring your bundler. Make sure to install the bundler specific plugin and use it. @pigment-css/vite-plugin for Vite integration or @pigment-css/nextjs-plugin for Next.js integration.`
  );
}

// src/globalCss.js
function globalCss() {
  if (typeof __wyw_dynamic_import !== "undefined") {
    return;
  }
  throw new Error(
    `${"@pigment-css/react"}: You were trying to call "globalCss" function without configuring your bundler. Make sure to install the bundler specific plugin and use it. @pigment-css/vite-plugin for Vite integration or @pigment-css/nextjs-plugin for Next.js integration.`
  );
}

export { createUseThemeProps, globalCss, createExtendSxProp as internal_createExtendSxProp, keyframes, sx, useTheme };
//# sourceMappingURL=index.mjs.map
//# sourceMappingURL=index.mjs.map