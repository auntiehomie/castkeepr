'use strict';

var chunkQMF3JN35_js = require('./chunk-QMF3JN35.js');
var React = require('react');
var clsx = require('clsx');
var isPropValid = require('@emotion/is-prop-valid');
var jsxRuntime = require('react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);
var clsx__default = /*#__PURE__*/_interopDefault(clsx);
var isPropValid__default = /*#__PURE__*/_interopDefault(isPropValid);

/**
  * @pigment-css/react v0.0.30
  *
  * @license MIT
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
 
function getVariantClasses(_a, variants) {
  var _b = _a, { ownerState = {} } = _b, componentProps = chunkQMF3JN35_js.__objRest(_b, ["ownerState"]);
  const variantClasses = variants.filter(
    ({ props: variantProps }) => typeof variantProps === "function" ? variantProps(chunkQMF3JN35_js.__spreadProps(chunkQMF3JN35_js.__spreadValues(chunkQMF3JN35_js.__spreadValues({}, componentProps), ownerState), { ownerState })) : Object.entries(variantProps).every(([propKey, propValue]) => {
      return ownerState[propKey] === propValue || componentProps[propKey] === propValue;
    })
  ).map(({ className }) => className);
  return variantClasses;
}
function isHtmlTag(tag) {
  return typeof tag === "string" && // 96 is one less than the char code
  // for "a" so this is checking that
  // it's a lowercase character
  tag.charCodeAt(0) > 96;
}
var slotShouldForwardProp = (key) => key !== "as" && key !== "ownerState";
var rootShouldForwardProp = (key) => slotShouldForwardProp(key) && key !== "classes";
function styled(tag, componentMeta = {}) {
  const { name, slot, shouldForwardProp } = componentMeta;
  let finalShouldForwardProp = shouldForwardProp;
  if (!shouldForwardProp) {
    if (isHtmlTag(tag)) {
      finalShouldForwardProp = isPropValid__default.default;
    } else if (slot === "Root" || slot === "root") {
      finalShouldForwardProp = rootShouldForwardProp;
    } else {
      finalShouldForwardProp = slotShouldForwardProp;
    }
  }
  let shouldUseAs = !finalShouldForwardProp("as");
  if (typeof tag !== "string" && tag.__styled_by_pigment_css) {
    shouldUseAs = false;
  }
  function scopedStyledWithOptions(options = {}) {
    const { displayName, classes = [], vars: cssVars = {}, variants = [] } = options;
    const StyledComponent = React__namespace.forwardRef(function StyledComponent2(inProps, ref) {
      const _a = inProps, { className, sx, style, ownerState } = _a, props = chunkQMF3JN35_js.__objRest(_a, ["className", "sx", "style", "ownerState"]);
      const Component = shouldUseAs && inProps.as || tag;
      const varStyles = Object.entries(cssVars).reduce(
        (acc, [cssVariable, [variableFunction, isUnitLess]]) => {
          const value = variableFunction(inProps);
          if (typeof value === "undefined") {
            return acc;
          }
          if (typeof value === "string" || isUnitLess) {
            acc[`--${cssVariable}`] = value;
          } else {
            acc[`--${cssVariable}`] = `${value}px`;
          }
          return acc;
        },
        {}
      );
      const finalClassName = clsx__default.default(classes, className, getVariantClasses(inProps, variants));
      if (inProps.as && !shouldForwardProp) {
        if (!isHtmlTag(Component)) {
          if (slot === "Root" || slot === "root") {
            finalShouldForwardProp = rootShouldForwardProp;
          } else {
            finalShouldForwardProp = slotShouldForwardProp;
          }
        }
      }
      const newProps = {};
      for (const key in props) {
        if (shouldUseAs && key === "as") {
          continue;
        }
        if (finalShouldForwardProp(key) || !shouldUseAs && key === "as") {
          newProps[key] = props[key];
        }
      }
      return /* @__PURE__ */ jsxRuntime.jsx(
        Component,
        chunkQMF3JN35_js.__spreadProps(chunkQMF3JN35_js.__spreadValues(chunkQMF3JN35_js.__spreadValues({}, newProps), Component.__styled_by_pigment_css && { ownerState }), {
          ref,
          className: finalClassName,
          style: chunkQMF3JN35_js.__spreadValues(chunkQMF3JN35_js.__spreadValues({}, varStyles), style)
        })
      );
    });
    let componentName = displayName;
    if (!componentName && name) {
      componentName = `${name}${slot ? `-${slot}` : ""}`;
    }
    StyledComponent.displayName = `Styled(${componentName})`;
    StyledComponent.__styled_by_pigment_css = true;
    return StyledComponent;
  }
  return scopedStyledWithOptions;
}

exports.styled = styled;
//# sourceMappingURL=chunk-DAMQJJTB.js.map
//# sourceMappingURL=chunk-DAMQJJTB.js.map