import { __objRest, __spreadValues } from './chunk-L25ZX2YK.mjs';
import * as React from 'react';
import PropTypes from 'prop-types';
import { jsx } from 'react/jsx-runtime';

/**
  * @pigment-css/react v0.0.30
  *
  * @license MIT
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
 
var Box = React.forwardRef(
  (_a, ref) => {
    var _b = _a, {
      as = "div",
      component: component,
      sx: sx,
      className,
      style
    } = _b, other = __objRest(_b, [
      "as",
      // Added to support compatibility with @mui/system
      "component",
      /**
       * The type of the transformed sx prop is either a
       * "string" if the css passed was fully static or an
       * object with the following shape:
       * {
       *  className: string,
       *  vars: Record<string, [string | number, boolean]>
       * }
       */
      "sx",
      "className",
      "style"
    ]);
    const Component = component != null ? component : as;
    const sxClass = typeof sx === "string" ? sx : sx == null ? void 0 : sx.className;
    const classes = [className, sxClass].filter(Boolean).join(" ");
    const sxVars = sx && typeof sx !== "string" ? sx == null ? void 0 : sx.vars : {};
    const varStyles = {};
    if (sxVars) {
      Object.entries(sxVars).forEach(([cssVariable, [value, isUnitLess]]) => {
        if (typeof value === "string" || isUnitLess) {
          varStyles[`--${cssVariable}`] = value;
        } else {
          varStyles[`--${cssVariable}`] = `${value}px`;
        }
      });
    }
    const styles = __spreadValues(__spreadValues({}, style), varStyles);
    return /* @__PURE__ */ jsx(Component, __spreadValues({ ref, className: classes, style: styles }, other));
  }
);
process.env.NODE_ENV !== "production" ? Box.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   * Replacement for the emotion's `as` prop.
   */
  as: PropTypes.elementType,
  /**
   * The content of the component.
   */
  children: PropTypes.node,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: PropTypes.elementType,
  /**
   * The style extension prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
} : void 0;
var Box_default = Box;

export { Box_default as default };
//# sourceMappingURL=Box.mjs.map
//# sourceMappingURL=Box.mjs.map