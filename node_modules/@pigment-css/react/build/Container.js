'use strict';

var chunkDAMQJJTB_js = require('./chunk-DAMQJJTB.js');
var chunkQMF3JN35_js = require('./chunk-QMF3JN35.js');
var React = require('react');
var PropTypes = require('prop-types');
var jsxRuntime = require('react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);
var PropTypes__default = /*#__PURE__*/_interopDefault(PropTypes);

/**
  * @pigment-css/react v0.0.30
  *
  * @license MIT
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
 
var ContainerRoot = chunkDAMQJJTB_js.styled("div", {
  name: "MuiContainer",
  slot: "Root"
})(({ theme }) => ({
  width: "100%",
  marginLeft: "auto",
  boxSizing: "border-box",
  marginRight: "auto",
  variants: [
    {
      props: (props) => !props.disableGutters,
      style: {
        paddingLeft: theme.spacing(2),
        paddingRight: theme.spacing(2),
        [theme.breakpoints.up("sm")]: {
          paddingLeft: theme.spacing(3),
          paddingRight: theme.spacing(3)
        }
      }
    },
    {
      props: {
        fixed: true
      },
      style: Object.keys(theme.breakpoints.values).reduce((acc, breakpointValueKey) => {
        const breakpoint = breakpointValueKey;
        const value = theme.breakpoints.values[breakpoint];
        if (value !== 0) {
          acc[theme.breakpoints.up(breakpoint)] = {
            maxWidth: `${value}${theme.breakpoints.unit}`
          };
        }
        return acc;
      }, {})
    },
    {
      props: {
        maxWidth: "xs"
      },
      style: {
        [theme.breakpoints.up("xs")]: {
          maxWidth: Math.max(theme.breakpoints.values.xs, 444)
        }
      }
    },
    ...theme.breakpoints.keys.filter((breakpoint) => breakpoint && breakpoint !== "xs").map((breakpoint) => {
      return {
        props: {
          maxWidth: breakpoint
        },
        style: {
          [theme.breakpoints.up(breakpoint)]: {
            // @ts-ignore module augmentation fails if custom breakpoints are used
            maxWidth: `${theme.breakpoints.values[breakpoint]}${theme.breakpoints.unit}`
          }
        }
      };
    }).filter(Boolean)
  ]
}));
var Container = React__namespace.forwardRef(function Container2(props, ref) {
  const _a = props, {
    className,
    component = "div",
    disableGutters = false,
    fixed = false,
    maxWidth = "lg"
  } = _a, other = chunkQMF3JN35_js.__objRest(_a, [
    "className",
    "component",
    "disableGutters",
    "fixed",
    "maxWidth"
  ]);
  const ownerState = chunkQMF3JN35_js.__spreadProps(chunkQMF3JN35_js.__spreadValues({}, props), {
    component,
    disableGutters,
    fixed,
    maxWidth
  });
  return (
    // @ts-ignore theme is injected by the styled util
    /* @__PURE__ */ jsxRuntime.jsx(
      ContainerRoot,
      chunkQMF3JN35_js.__spreadValues({
        as: component,
        ownerState,
        className,
        ref
      }, other)
    )
  );
});
process.env.NODE_ENV !== "production" ? Container.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: PropTypes__default.default.node,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: PropTypes__default.default.elementType,
  /**
   * If `true`, the left and right padding is removed.
   * @default false
   */
  disableGutters: PropTypes__default.default.bool,
  /**
   * Set the max-width to match the min-width of the current breakpoint.
   * This is useful if you'd prefer to design for a fixed set of sizes
   * instead of trying to accommodate a fully fluid viewport.
   * It's fluid by default.
   * @default false
   */
  fixed: PropTypes__default.default.bool,
  /**
   * Determine the max-width of the container.
   * The container width grows with the size of the screen.
   * Set to `false` to disable `maxWidth`.
   * @default 'lg'
   */
  maxWidth: PropTypes__default.default.oneOf(["lg", "md", "sm", "xl", "xs", false])
} : void 0;
var Container_default = Container;

module.exports = Container_default;
//# sourceMappingURL=Container.js.map

module.exports = exports.default;
//# sourceMappingURL=Container.js.map