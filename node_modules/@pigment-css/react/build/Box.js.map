{"version":3,"sources":["../src/Box.jsx"],"names":["React","__objRest","__spreadValues","PropTypes"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,IAAM,GAAY,GAAAA,gBAAA,CAAA,UAAA;AAAA,EAChB,CACE,IAkBA,GACG,KAAA;AAnBH,IACE,IAAA,EAAA,GAAA,EAAA,EAAA;AAAA,MAAK,EAAA,GAAA,KAAA;AAAA,MAEL,SAAA,EAAA,SAAA;AAAA,MAUA,EAAA,EAAA,EAAA;AAAA,MACA,SAAA;AAAA,MACA;AAAA,KArBN,GAMI,EAgBK,EAAA,KAAA,GAAAC,0BAAA,CAhBL,EAgBK,EAAA;AAAA,MAfH,IAAA;AAAA;AAAA,MAEA,WAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAUA,IAAA;AAAA,MACA,WAAA;AAAA,MACA;AAAA,KAAA,CAAA;AAKF,IAAA,MAAM,YAAY,SAAa,IAAA,IAAA,GAAA,SAAA,GAAA,EAAA;AAE/B,IAAA,MAAM,OAAU,GAAA,OAAO,EAAO,KAAA,QAAA,GAAW,KAAK,EAAI,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,SAAA;AAClD,IAAM,MAAA,OAAA,GAAU,CAAC,SAAW,EAAA,OAAO,EAAE,MAAO,CAAA,OAAO,CAAE,CAAA,IAAA,CAAK,GAAG,CAAA;AAE7D,IAAA,MAAM,SAAS,EAAM,IAAA,OAAO,OAAO,QAAW,GAAA,EAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAI,OAAO,EAAC;AAC1D,IAAA,MAAM,YAAY,EAAC;AAEnB,IAAA,IAAI,MAAQ,EAAA;AACV,MAAO,MAAA,CAAA,OAAA,CAAQ,MAAM,CAAA,CAAE,OAAQ,CAAA,CAAC,CAAC,WAAA,EAAa,CAAC,KAAA,EAAO,UAAU,CAAC,CAAM,KAAA;AACrE,QAAI,IAAA,OAAO,KAAU,KAAA,QAAA,IAAY,UAAY,EAAA;AAC3C,UAAU,SAAA,CAAA,CAAA,EAAA,EAAK,WAAW,CAAA,CAAE,CAAI,GAAA,KAAA;AAAA,SAC3B,MAAA;AACL,UAAA,SAAA,CAAU,CAAK,EAAA,EAAA,WAAW,CAAE,CAAA,CAAA,GAAI,GAAG,KAAK,CAAA,EAAA,CAAA;AAAA;AAC1C,OACD,CAAA;AAAA;AAGH,IAAM,MAAA,MAAA,GAASC,oEACV,KACA,CAAA,EAAA,SAAA,CAAA;AAIL,IAAA,sCAAQ,SAAU,EAAAA,+BAAA,CAAA,EAAA,GAAA,EAAU,WAAW,OAAS,EAAA,KAAA,EAAO,UAAY,KAAO,CAAA,CAAA;AAAA;AAE9E,CAAA;AAEA,OAAA,CAAQ,GAAI,CAAA,QAAA,KAAa,YACpB,GAAA,GAAA,CAAI,SAAmC,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUtC,IAAIC,0BAAU,CAAA,WAAA;AAAA;AAAA;AAAA;AAAA,EAId,UAAUA,0BAAU,CAAA,IAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAKpB,WAAWA,0BAAU,CAAA,WAAA;AAAA;AAAA;AAAA;AAAA,EAIrB,EAAA,EAAIA,2BAAU,SAAU,CAAA,CAACA,2BAAU,IAAM,EAAAA,0BAAA,CAAU,MAAM,CAAC;AAC5D,CACA,GAAA,KAAA,CAAA;AAEJ,IAAO,WAAQ,GAAA","file":"Box.js","sourcesContent":["/* eslint-disable react/prop-types */\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Box = React.forwardRef(\n  (\n    {\n      as = 'div',\n      // Added to support compatibility with @mui/system\n      component,\n      /**\n       * The type of the transformed sx prop is either a\n       * \"string\" if the css passed was fully static or an\n       * object with the following shape:\n       * {\n       *  className: string,\n       *  vars: Record<string, [string | number, boolean]>\n       * }\n       */\n      sx,\n      className,\n      style,\n      ...other\n    },\n    ref,\n  ) => {\n    const Component = component ?? as;\n    // eslint-disable-next-line react/prop-types\n    const sxClass = typeof sx === 'string' ? sx : sx?.className;\n    const classes = [className, sxClass].filter(Boolean).join(' ');\n    // eslint-disable-next-line react/prop-types\n    const sxVars = sx && typeof sx !== 'string' ? sx?.vars : {};\n    const varStyles = {};\n\n    if (sxVars) {\n      Object.entries(sxVars).forEach(([cssVariable, [value, isUnitLess]]) => {\n        if (typeof value === 'string' || isUnitLess) {\n          varStyles[`--${cssVariable}`] = value;\n        } else {\n          varStyles[`--${cssVariable}`] = `${value}px`;\n        }\n      });\n    }\n\n    const styles = {\n      ...style,\n      ...varStyles,\n    };\n\n    // eslint-disable-next-line react/jsx-filename-extension\n    return <Component ref={ref} className={classes} style={styles} {...other} />;\n  },\n);\n\nprocess.env.NODE_ENV !== 'production'\n  ? (Box.propTypes /* remove-proptypes */ = {\n      // ┌────────────────────────────── Warning ──────────────────────────────┐\n      // │ These PropTypes are generated from the TypeScript type definitions. │\n      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n      // └─────────────────────────────────────────────────────────────────────┘\n      /**\n       * The component used for the root node.\n       * Either a string to use a HTML element or a component.\n       * Replacement for the emotion's `as` prop.\n       */\n      as: PropTypes.elementType,\n      /**\n       * The content of the component.\n       */\n      children: PropTypes.node,\n      /**\n       * The component used for the root node.\n       * Either a string to use a HTML element or a component.\n       */\n      component: PropTypes.elementType,\n      /**\n       * The style extension prop that allows defining system overrides as well as additional CSS styles.\n       */\n      sx: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    })\n  : void 0;\n\nexport default Box;\n"]}