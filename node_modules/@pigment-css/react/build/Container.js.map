{"version":3,"sources":["../src/Container.jsx"],"names":["styled","React","Container","__objRest","__spreadProps","jsx","__spreadValues","PropTypes"],"mappings":"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","file":"Container.js","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from './styled';\n\nconst ContainerRoot = styled('div', {\n  name: 'MuiContainer',\n  slot: 'Root',\n})(({ theme }) => ({\n  width: '100%',\n  marginLeft: 'auto',\n  boxSizing: 'border-box',\n  marginRight: 'auto',\n  variants: [\n    {\n      props: (props) => !props.disableGutters,\n      style: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(2),\n        [theme.breakpoints.up('sm')]: {\n          paddingLeft: theme.spacing(3),\n          paddingRight: theme.spacing(3),\n        },\n      },\n    },\n    {\n      props: {\n        fixed: true,\n      },\n      style: Object.keys(theme.breakpoints.values).reduce((acc, breakpointValueKey) => {\n        const breakpoint = breakpointValueKey;\n        const value = theme.breakpoints.values[breakpoint];\n\n        if (value !== 0) {\n          // @ts-ignore\n          acc[theme.breakpoints.up(breakpoint)] = {\n            maxWidth: `${value}${theme.breakpoints.unit}`,\n          };\n        }\n        return acc;\n      }, {}),\n    },\n    {\n      props: {\n        maxWidth: 'xs',\n      },\n      style: {\n        [theme.breakpoints.up('xs')]: {\n          maxWidth: Math.max(theme.breakpoints.values.xs, 444),\n        },\n      },\n    },\n    ...theme.breakpoints.keys\n      .filter((breakpoint) => breakpoint && breakpoint !== 'xs')\n      .map((breakpoint) => {\n        return {\n          props: {\n            maxWidth: breakpoint,\n          },\n          style: {\n            [theme.breakpoints.up(breakpoint)]: {\n              // @ts-ignore module augmentation fails if custom breakpoints are used\n              maxWidth: `${theme.breakpoints.values[breakpoint]}${theme.breakpoints.unit}`,\n            },\n          },\n        };\n      })\n      .filter(Boolean),\n  ],\n}));\n\nconst Container = React.forwardRef(function Container(props, ref) {\n  const {\n    className,\n    component = 'div',\n    disableGutters = false,\n    fixed = false,\n    maxWidth = 'lg',\n    // classes: classesProp,\n    ...other\n  } = props;\n\n  const ownerState = {\n    ...props,\n    component,\n    disableGutters,\n    fixed,\n    maxWidth,\n  };\n\n  return (\n    // @ts-ignore theme is injected by the styled util\n    <ContainerRoot\n      as={component}\n      // @ts-ignore module augmentation fails if custom breakpoints are used\n      ownerState={ownerState}\n      className={className}\n      ref={ref}\n      {...other}\n    />\n  );\n});\n\nprocess.env.NODE_ENV !== 'production'\n  ? (Container.propTypes /* remove-proptypes */ = {\n      // ┌────────────────────────────── Warning ──────────────────────────────┐\n      // │ These PropTypes are generated from the TypeScript type definitions. │\n      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n      // └─────────────────────────────────────────────────────────────────────┘\n      /**\n       * The content of the component.\n       */\n      children: PropTypes.node,\n      /**\n       * The component used for the root node.\n       * Either a string to use a HTML element or a component.\n       */\n      component: PropTypes.elementType,\n      /**\n       * If `true`, the left and right padding is removed.\n       * @default false\n       */\n      disableGutters: PropTypes.bool,\n      /**\n       * Set the max-width to match the min-width of the current breakpoint.\n       * This is useful if you'd prefer to design for a fixed set of sizes\n       * instead of trying to accommodate a fully fluid viewport.\n       * It's fluid by default.\n       * @default false\n       */\n      fixed: PropTypes.bool,\n      /**\n       * Determine the max-width of the container.\n       * The container width grows with the size of the screen.\n       * Set to `false` to disable `maxWidth`.\n       * @default 'lg'\n       */\n      maxWidth: PropTypes.oneOf(['lg', 'md', 'sm', 'xl', 'xs', false]),\n    })\n  : void 0;\n\nexport default Container;\n"]}