import { css } from './chunk-FV633G5R.mjs';
import { generateAtomics } from './chunk-N7I2UQMS.mjs';
import { __objRest, __spreadProps, __spreadValues } from './chunk-L25ZX2YK.mjs';
import clsx from 'clsx';
import PropTypes from 'prop-types';
import * as React from 'react';
import { jsx } from 'react/jsx-runtime';

/**
  * @pigment-css/react v0.0.30
  *
  * @license MIT
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
 
var stackAtomics = generateAtomics(({ theme }) => {
  var _a, _b, _c, _d;
  const conditions = {};
  Object.entries(theme.breakpoints.values).sort((a, b) => a[1] - b[1]).forEach(([breakpoint, value]) => {
    var _a2;
    conditions[breakpoint] = `@media (min-width: ${value}${(_a2 = theme.breakpoints.unit) != null ? _a2 : "px"})`;
  });
  return {
    conditions,
    defaultCondition: (_b = (_a = theme.breakpoints) == null ? void 0 : _a.keys) == null ? void 0 : _b[0],
    properties: {
      flexDirection: ["column", "column-reverse", "row", "row-reverse"],
      gap: ["--Stack-gap"]
    },
    shorthands: {
      direction: ["flexDirection"],
      spacing: ["gap"]
    },
    multipliers: {
      gap: Array.isArray((_c = theme.vars) == null ? void 0 : _c.spacing) ? theme.vars.spacing[0] : (_d = theme.vars) == null ? void 0 : _d.spacing
    }
  };
});
function joinChildren(children, separator) {
  const childrenArray = React.Children.toArray(children).filter(Boolean);
  return childrenArray.reduce((output, child, index) => {
    output.push(child);
    if (index < childrenArray.length - 1) {
      output.push(React.cloneElement(separator, { key: `separator-${index}` }));
    }
    return output;
  }, []);
}
var Stack = React.forwardRef(function Stack2(_a, ref) {
  var _b = _a, {
    children,
    spacing = 0,
    style,
    className,
    divider,
    component = "div",
    direction = "column"
  } = _b, other = __objRest(_b, [
    "children",
    "spacing",
    "style",
    "className",
    "divider",
    "component",
    "direction"
  ]);
  const stackAtomicsObj = {
    direction,
    spacing
  };
  const stackClasses = stackAtomics(stackAtomicsObj);
  const Component = component;
  return /* @__PURE__ */ jsx(
    Component,
    __spreadProps(__spreadValues({
      ref,
      className: clsx(
        css({
          display: "flex"
        }),
        stackClasses.className,
        className
      ),
      style: __spreadValues(__spreadValues({}, style), stackClasses.style)
    }, other), {
      children: divider ? joinChildren(children, divider) : children
    })
  );
});
if (process.env.NODE_ENV !== "production") {
  Stack.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: PropTypes.node,
    /**
     * @ignore
     */
    className: PropTypes.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: PropTypes.elementType,
    /**
     * @ignore
     */
    direction: PropTypes.oneOfType([
      PropTypes.oneOf(["column", "column-reverse", "row", "row-reverse"]),
      PropTypes.arrayOf(PropTypes.oneOf(["column", "column-reverse", "row", "row-reverse"])),
      PropTypes.object
    ]),
    /**
     * @ignore
     */
    divider: PropTypes.node,
    /**
     * @ignore
     */
    spacing: PropTypes.oneOfType([
      PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired),
      PropTypes.number,
      PropTypes.object,
      PropTypes.string
    ]),
    /**
     * @ignore
     */
    style: PropTypes.shape()
  };
}
if (Stack) {
  Stack.displayName = "Stack";
}
var Stack_default = Stack;

export { Stack_default as default };
//# sourceMappingURL=Stack.mjs.map
//# sourceMappingURL=Stack.mjs.map