'use strict';

var chunkDAMQJJTB_js = require('./chunk-DAMQJJTB.js');
var chunkBV2JNSJM_js = require('./chunk-BV2JNSJM.js');
var chunkQMF3JN35_js = require('./chunk-QMF3JN35.js');
var clsx = require('clsx');
var PropTypes = require('prop-types');
var React = require('react');
var jsxRuntime = require('react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var clsx__default = /*#__PURE__*/_interopDefault(clsx);
var PropTypes__default = /*#__PURE__*/_interopDefault(PropTypes);
var React__namespace = /*#__PURE__*/_interopNamespace(React);

/**
  * @pigment-css/react v0.0.30
  *
  * @license MIT
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
 
function isGridComponent(element) {
  var _a, _b, _c;
  try {
    return element.type.muiName === "Grid" || ((_c = (_b = (_a = element.type) == null ? void 0 : _a._payload) == null ? void 0 : _b.value) == null ? void 0 : _c.muiName) === "Grid";
  } catch (error) {
    return false;
  }
}
var gridAtomics = chunkBV2JNSJM_js.generateAtomics(({ theme }) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
  const conditions = {};
  Object.entries(theme.breakpoints.values).sort((a, b) => a[1] - b[1]).forEach(([breakpoint, value]) => {
    var _a2;
    conditions[breakpoint] = `@media (min-width: ${value}${(_a2 = theme.breakpoints.unit) != null ? _a2 : "px"})`;
  });
  return {
    conditions,
    defaultCondition: (_b = (_a = theme.breakpoints) == null ? void 0 : _a.keys) == null ? void 0 : _b[0],
    properties: {
      flexDirection: ["column", "column-reverse", "row", "row-reverse"],
      "--Grid-parent-column-count": ["--Grid-parent-column-count"],
      "--Grid-parent-column-spacing": ["--Grid-parent-column-spacing"],
      "--Grid-parent-row-spacing": ["--Grid-parent-row-spacing"],
      "--Grid-self-column-span": ["--Grid-self-column-span"],
      "--Grid-self-width": ["--Grid-self-width"],
      "--Grid-self-max-width": ["--Grid-self-max-width"],
      "--Grid-self-flex": ["--Grid-self-flex"],
      "--Grid-self-column-spacing": ["--Grid-self-column-spacing"],
      "--Grid-self-row-spacing": ["--Grid-self-row-spacing"],
      "--Grid-self-offset": ["--Grid-self-offset"],
      "--Grid-self-margin-left": ["--Grid-self-margin-left"]
    },
    unitless: ["--Grid-parent-column-count", "--Grid-self-column-span", "--Grid-self-offset"],
    multipliers: {
      "--Grid-parent-column-spacing": Array.isArray((_c = theme.vars) == null ? void 0 : _c.spacing) ? theme.vars.spacing[0] : (_d = theme.vars) == null ? void 0 : _d.spacing,
      "--Grid-parent-row-spacing": Array.isArray((_e = theme.vars) == null ? void 0 : _e.spacing) ? theme.vars.spacing[0] : (_f = theme.vars) == null ? void 0 : _f.spacing,
      "--Grid-self-column-spacing": Array.isArray((_g = theme.vars) == null ? void 0 : _g.spacing) ? theme.vars.spacing[0] : (_h = theme.vars) == null ? void 0 : _h.spacing,
      "--Grid-self-row-spacing": Array.isArray((_i = theme.vars) == null ? void 0 : _i.spacing) ? theme.vars.spacing[0] : (_j = theme.vars) == null ? void 0 : _j.spacing
    },
    inlineGetters: {
      "--Grid-self-width": (value) => {
        if (value === "grow") {
          return "unset";
        }
        if (value === "auto") {
          return "auto";
        }
        return "var(--Grid-fixed-width)";
      },
      "--Grid-self-max-width": (value) => {
        if (value === "grow") {
          return "100%";
        }
        if (value === "auto") {
          return "none";
        }
        return "unset";
      },
      "--Grid-self-flex": (value) => {
        if (value === "grow") {
          return "1 1 0";
        }
        if (value === "auto") {
          return "0 0 auto";
        }
        return "0 1 auto";
      },
      "--Grid-self-margin-left": (value) => {
        if (value === "auto") {
          return "auto";
        }
        return "var(--Grid-fixed-offset)";
      }
    }
  };
});
var GridComponent = chunkDAMQJJTB_js.styled("div")({
  "--Grid-fixed-width": "calc(100% * var(--Grid-self-column-span) / var(--Grid-parent-column-count) - (var(--Grid-parent-column-count) - var(--Grid-self-column-span)) * var(--Grid-parent-column-spacing) / var(--Grid-parent-column-count))",
  "--Grid-fixed-offset": "calc(100% * var(--Grid-self-offset) / var(--Grid-parent-column-count) + var(--Grid-parent-column-spacing) * var(--Grid-self-offset) / var(--Grid-parent-column-count))",
  variants: [
    {
      props: { container: true },
      style: {
        display: "flex",
        gap: "var(--Grid-self-row-spacing) var(--Grid-self-column-spacing)"
      }
    },
    {
      props: ({ size }) => size !== void 0,
      style: {
        width: "var(--Grid-self-width)",
        maxWidth: "var(--Grid-self-max-width)",
        flex: "var(--Grid-self-flex)"
      }
    },
    {
      props: ({ offset }) => offset !== void 0,
      style: {
        marginLeft: "var(--Grid-self-margin-left)"
      }
    },
    ...["nowrap", "wrap-reverse", "wrap"].map((wrap) => ({
      props: { wrap, container: true },
      style: {
        flexWrap: wrap
      }
    }))
  ]
});
var Grid = React__namespace.forwardRef(function Grid2(_a, ref) {
  var _b = _a, {
    children,
    columns,
    spacing,
    columnSpacing,
    rowSpacing,
    direction = "row",
    style,
    className,
    component = "div",
    container = false,
    size,
    offset,
    unstable_parent_columns: unstable_parent_columns,
    unstable_parent_column_spacing: unstable_parent_column_spacing,
    unstable_parent_row_spacing: unstable_parent_row_spacing,
    wrap = "wrap"
  } = _b, other = chunkQMF3JN35_js.__objRest(_b, [
    "children",
    "columns",
    "spacing",
    "columnSpacing",
    "rowSpacing",
    "direction",
    "style",
    "className",
    "component",
    "container",
    "size",
    "offset",
    // internal props
    // eslint-disable-next-line react/prop-types
    "unstable_parent_columns",
    // eslint-disable-next-line react/prop-types
    "unstable_parent_column_spacing",
    // eslint-disable-next-line react/prop-types
    "unstable_parent_row_spacing",
    "wrap"
  ]);
  var _a2, _b2, _c, _d, _e;
  const selfColumns = (_a2 = columns != null ? columns : unstable_parent_columns) != null ? _a2 : 12;
  const selfColumnSpacing = (_c = (_b2 = columnSpacing != null ? columnSpacing : spacing) != null ? _b2 : unstable_parent_column_spacing) != null ? _c : 0;
  const selfRowSpacing = (_e = (_d = rowSpacing != null ? rowSpacing : spacing) != null ? _d : unstable_parent_row_spacing) != null ? _e : 0;
  const gridAtomicsObj = {
    flexDirection: direction
  };
  if (unstable_parent_columns !== void 0) {
    gridAtomicsObj["--Grid-parent-column-count"] = unstable_parent_columns;
  }
  if (unstable_parent_column_spacing !== void 0) {
    gridAtomicsObj["--Grid-parent-column-spacing"] = unstable_parent_column_spacing;
  }
  if (unstable_parent_row_spacing !== void 0) {
    gridAtomicsObj["--Grid-parent-row-spacing"] = unstable_parent_row_spacing;
  }
  if (container) {
    gridAtomicsObj["--Grid-self-column-spacing"] = selfColumnSpacing;
    gridAtomicsObj["--Grid-self-row-spacing"] = selfRowSpacing;
  }
  if (size) {
    gridAtomicsObj["--Grid-self-column-span"] = size;
    gridAtomicsObj["--Grid-self-width"] = size;
    gridAtomicsObj["--Grid-self-max-width"] = size;
    gridAtomicsObj["--Grid-self-flex"] = size;
  }
  if (offset) {
    gridAtomicsObj["--Grid-self-offset"] = offset;
    gridAtomicsObj["--Grid-self-margin-left"] = offset;
  }
  const ownerState = { container, size, offset, wrap };
  const gridClasses = gridAtomics(gridAtomicsObj);
  return /* @__PURE__ */ jsxRuntime.jsx(
    GridComponent,
    chunkQMF3JN35_js.__spreadProps(chunkQMF3JN35_js.__spreadValues({
      as: component,
      ref,
      className: clsx__default.default(gridClasses.className, className),
      style: chunkQMF3JN35_js.__spreadValues(chunkQMF3JN35_js.__spreadValues({}, style), gridClasses.style)
    }, other), {
      ownerState,
      children: React__namespace.Children.map(children, (child) => {
        if (React__namespace.isValidElement(child) && isGridComponent(child)) {
          return React__namespace.cloneElement(child, {
            unstable_parent_columns: selfColumns,
            unstable_parent_column_spacing: selfColumnSpacing,
            unstable_parent_row_spacing: selfRowSpacing
          });
        }
        return child;
      })
    })
  );
});
Grid.muiName = "Grid";
process.env.NODE_ENV !== "production" && (Grid.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: PropTypes__default.default.node,
  /**
   * @ignore
   */
  className: PropTypes__default.default.string,
  /**
   * @ignore
   */
  columns: PropTypes__default.default.oneOfType([
    PropTypes__default.default.arrayOf(PropTypes__default.default.number),
    PropTypes__default.default.number,
    PropTypes__default.default.object
  ]),
  /**
   * @ignore
   */
  columnSpacing: PropTypes__default.default.oneOfType([
    PropTypes__default.default.arrayOf(PropTypes__default.default.oneOfType([PropTypes__default.default.number, PropTypes__default.default.string]).isRequired),
    PropTypes__default.default.number,
    PropTypes__default.default.object,
    PropTypes__default.default.string
  ]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: PropTypes__default.default.elementType,
  /**
   * @ignore
   */
  container: PropTypes__default.default.bool,
  /**
   * @ignore
   */
  direction: PropTypes__default.default.oneOfType([
    PropTypes__default.default.oneOf(["column", "column-reverse", "row", "row-reverse"]),
    PropTypes__default.default.arrayOf(PropTypes__default.default.oneOf(["column", "column-reverse", "row", "row-reverse"])),
    PropTypes__default.default.object
  ]),
  /**
   * @ignore
   */
  offset: PropTypes__default.default.oneOfType([
    PropTypes__default.default.arrayOf(PropTypes__default.default.number),
    PropTypes__default.default.number,
    PropTypes__default.default.object
  ]),
  /**
   * @ignore
   */
  rowSpacing: PropTypes__default.default.oneOfType([
    PropTypes__default.default.arrayOf(PropTypes__default.default.oneOfType([PropTypes__default.default.number, PropTypes__default.default.string]).isRequired),
    PropTypes__default.default.number,
    PropTypes__default.default.object,
    PropTypes__default.default.string
  ]),
  /**
   * @ignore
   */
  size: PropTypes__default.default.oneOfType([
    PropTypes__default.default.arrayOf(PropTypes__default.default.number),
    PropTypes__default.default.number,
    PropTypes__default.default.object
  ]),
  /**
   * @ignore
   */
  spacing: PropTypes__default.default.oneOfType([
    PropTypes__default.default.arrayOf(PropTypes__default.default.oneOfType([PropTypes__default.default.number, PropTypes__default.default.string]).isRequired),
    PropTypes__default.default.number,
    PropTypes__default.default.object,
    PropTypes__default.default.string
  ]),
  /**
   * @ignore
   */
  style: PropTypes__default.default.object,
  /**
   * Defines the `flex-wrap` style property.
   * It's applied for all screen sizes.
   * @default 'wrap'
   */
  wrap: PropTypes__default.default.oneOf(["nowrap", "wrap-reverse", "wrap"])
});
Grid.displayName = "Grid";
var Grid_default = Grid;

module.exports = Grid_default;
//# sourceMappingURL=Grid.js.map

module.exports = exports.default;
//# sourceMappingURL=Grid.js.map