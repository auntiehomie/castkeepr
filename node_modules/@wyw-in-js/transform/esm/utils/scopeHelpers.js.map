{"version":3,"file":"scopeHelpers.js","names":["NODE_FIELDS","findIdentifiers","nonType","getScope","isNotNull","isRemoved","validateField","node","key","val","field","validate","optional","getBinding","path","binding","name","undefined","reference","referencePath","force","isReferencedIdentifier","referencePaths","includes","referenced","push","references","length","isReferenced","kind","isFunctionExpression","parentPath","isVariableDeclarator","id","get","isIdentifier","idBinding","every","i","find","ancestor","isTSType","isFlowType","isReferencedConstantViolation","p","isAssignmentExpression","isExpressionStatement","dereference","isReference","referencesInConstantViolations","constantViolations","filter","isConstantViolation","nonTypeReferences","dereferenceAll","map","identifierPath","referenceAll","forEach","deletingNodes","WeakSet","isEmptyList","list","has","getPathFromAction","action","Array","isArray","Error","isPrototypeAssignment","left","type","object","property","canFunctionBeDelete","fnPath","fnScope","scope","parentScope","parent","listKey","findActionForNode","add","isProgram","isClassDeclaration","isClassExpression","body","isFunction","isBlockStatement","async","directives","generator","params","isConditionalExpression","alternate","isLogicalExpression","operator","value","right","isObjectProperty","maybeDefineProperty","isCallExpression","matchesPattern","isTemplateLiteral","isForInStatement","isFunctionDeclaration","isObjectMethod","isClassMethod","prevStatement","isIfStatement","isReturnStatement","slice","statement","init","isExportNamedDeclaration","declaration","isTryStatement","referenceEnums","program","traverse","ExpressionStatement","expressionStatement","expression","callee","args","arg","fixed","removeUnreferenced","items","Set","item","hasReferences","forDeleting","identifier","removeWithRelated","result","sort","a","b","localeCompare","getNodeForValue","staticEvaluate","evaluated","evaluate","confident","applyAction","test","isBooleanLiteral","consequent","mutate","remove","replaceWith","paths","rootPath","getProgramParent","actions","affectedPaths","referencedIdentifiers","referencesOfBinding","reduce","acc","ref","isExportDefaultDeclaration","clean","join","fn","dereferenced","mutated","dead","assignments","assignment","declared","Object","values","getOuterBindingIdentifiers","Identifier","isArrayPattern","elements"],"sources":["../../src/utils/scopeHelpers.ts"],"sourcesContent":["/* eslint-disable no-restricted-syntax */\n/* eslint @typescript-eslint/no-use-before-define: [\"error\", { \"functions\": false }] */\n\nimport type { Binding, NodePath } from '@babel/traverse';\nimport type {\n  FieldOptions,\n  Function as FunctionNode,\n  Identifier,\n  JSXIdentifier,\n  Node,\n  Program,\n} from '@babel/types';\nimport { NODE_FIELDS } from '@babel/types';\n\nimport { findIdentifiers, nonType } from './findIdentifiers';\nimport { getScope } from './getScope';\nimport { isNotNull } from './isNotNull';\nimport { isRemoved } from './isRemoved';\n\nfunction validateField(\n  node: Node,\n  key: string,\n  val: unknown,\n  field: FieldOptions\n) {\n  if (!(field != null && field.validate)) return true;\n  if (field.optional && val == null) return true;\n  try {\n    field.validate(node, key, val);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nfunction getBinding(path: NodePath<Identifier | JSXIdentifier>) {\n  const binding = getScope(path).getBinding(path.node.name);\n  if (!binding) {\n    return undefined;\n  }\n\n  return binding;\n}\n\nexport function reference(\n  path: NodePath<Identifier | JSXIdentifier>,\n  referencePath: NodePath = path,\n  force = false\n): void {\n  if (!force && !path.isReferencedIdentifier()) return;\n\n  const binding = getBinding(path);\n  if (!binding) return;\n\n  if (binding.referencePaths.includes(referencePath)) {\n    return;\n  }\n\n  binding.referenced = true;\n  binding.referencePaths.push(referencePath ?? path);\n  binding.references = binding.referencePaths.length;\n}\n\nfunction isReferenced(binding: Binding): boolean {\n  const { kind, referenced, referencePaths, path } = binding;\n\n  if (\n    path.isFunctionExpression() &&\n    path.key === 'init' &&\n    path.parentPath.isVariableDeclarator()\n  ) {\n    // It is a function expression in a variable declarator\n    const id = path.parentPath.get('id');\n    if (id.isIdentifier()) {\n      const idBinding = getBinding(id);\n      return idBinding ? isReferenced(idBinding) : true;\n    }\n\n    return true;\n  }\n\n  if (!referenced) {\n    return false;\n  }\n\n  // If it's a param binding, we can't just remove it\n  // because it brakes the function signature. Keep it alive for now.\n  if ((kind as string) === 'param') {\n    return true;\n  }\n\n  // If all remaining references are in TS/Flow types, binding is unreferenced\n  return (\n    referencePaths.length > 0 ||\n    referencePaths.every((i) =>\n      i.find((ancestor) => ancestor.isTSType() || ancestor.isFlowType())\n    )\n  );\n}\n\nfunction isReferencedConstantViolation(path: NodePath, binding: Binding) {\n  if (path.find((p) => p === binding.path)) {\n    // function a(flag) { return (a = function(flag) { flag ? 1 : 2 }) }\n    // ^ Looks crazy, yeh? Welcome to the wonderful world of transpilers!\n    // `a = â€¦` here isn't a reference.\n    return false;\n  }\n\n  if (!path.isReferenced()) {\n    return false;\n  }\n\n  if (\n    path.isAssignmentExpression() &&\n    path.parentPath.isExpressionStatement()\n  ) {\n    // A root assignment without a parent expression statement is not a reference\n    return false;\n  }\n\n  return true;\n}\n\nexport function dereference(\n  path: NodePath<Identifier | JSXIdentifier>\n): Binding | null {\n  const binding = getBinding(path);\n  if (!binding) return null;\n\n  const isReference = binding.referencePaths.includes(path);\n  let referencesInConstantViolations = binding.constantViolations.filter((i) =>\n    isReferencedConstantViolation(i, binding)\n  );\n\n  const isConstantViolation = referencesInConstantViolations.includes(path);\n\n  if (!isReference && !isConstantViolation) {\n    return null;\n  }\n\n  if (isReference) {\n    binding.referencePaths = binding.referencePaths.filter((i) => i !== path);\n    binding.references -= 1;\n  } else {\n    referencesInConstantViolations = referencesInConstantViolations.filter(\n      (i) => i !== path\n    );\n  }\n\n  const nonTypeReferences = binding.referencePaths.filter(nonType);\n  binding.referenced =\n    nonTypeReferences.length + referencesInConstantViolations.length > 0;\n\n  return binding;\n}\n\nfunction dereferenceAll(path: NodePath): Binding[] {\n  return findIdentifiers([path])\n    .map((identifierPath) => dereference(identifierPath))\n    .filter(isNotNull);\n}\n\nexport function referenceAll(path: NodePath): void {\n  findIdentifiers([path]).forEach((identifierPath) =>\n    reference(identifierPath)\n  );\n}\n\nconst deletingNodes = new WeakSet<NodePath>();\n\nconst isEmptyList = (list: NodePath[]) =>\n  list.length === 0 || list.every((i) => deletingNodes.has(i));\n\ntype ReplaceAction = [action: 'replace', what: NodePath, by: Node];\ntype RemoveAction = [action: 'remove', what: NodePath];\n\nconst getPathFromAction = (action: RemoveAction | ReplaceAction) => {\n  if (!Array.isArray(action)) {\n    return action;\n  }\n\n  if (action[0] === 'replace' || action[0] === 'remove') {\n    return action[1];\n  }\n\n  throw new Error(`Unknown action type: ${action[0]}`);\n};\n\nfunction isPrototypeAssignment(path: NodePath) {\n  if (!path.isAssignmentExpression()) {\n    return false;\n  }\n\n  const { left } = path.node;\n  if (!left) {\n    return false;\n  }\n\n  if (left.type !== 'MemberExpression') {\n    return false;\n  }\n\n  const { object, property } = left;\n  if (!object || !property) {\n    return false;\n  }\n\n  return (\n    object.type === 'MemberExpression' &&\n    object.property.type === 'Identifier' &&\n    object.property.name === 'prototype'\n  );\n}\n\nfunction canFunctionBeDelete(fnPath: NodePath<FunctionNode>) {\n  if (isPrototypeAssignment(fnPath.parentPath)) {\n    // It is a prototype assignment, we can't delete it since we can't find all usages\n    return false;\n  }\n\n  const fnScope = fnPath.scope;\n  const parentScope = fnScope.parent;\n  if (parentScope.parent) {\n    // It isn't a top-level function, so we can't delete it\n    return true;\n  }\n\n  if (fnPath.listKey === 'arguments') {\n    // It is passed as an argument to another function, we can't delete it\n    return true;\n  }\n\n  return false;\n}\n\nexport function findActionForNode(\n  path: NodePath\n): RemoveAction | ReplaceAction | null {\n  if (isRemoved(path)) return null;\n\n  deletingNodes.add(path);\n\n  const parent = path.parentPath;\n\n  if (!parent) return ['remove', path];\n\n  if (parent.isProgram()) {\n    // Do not delete Program node\n    return ['remove', path];\n  }\n\n  if (parent.isClassDeclaration() || parent.isClassExpression()) {\n    if (path.key === 'body') {\n      return ['replace', path, { type: 'ClassBody', body: [] }];\n    }\n  }\n\n  if (parent.isFunction()) {\n    if (path.listKey === 'params') {\n      // Do not remove params of functions\n      return null;\n    }\n\n    if (\n      (path.isBlockStatement() && isEmptyList(path.get('body'))) ||\n      path === parent.get('body')\n    ) {\n      if (!canFunctionBeDelete(parent)) {\n        return [\n          'replace',\n          parent,\n          {\n            ...parent.node,\n            async: false,\n            body: {\n              type: 'BlockStatement',\n              body: [],\n              directives: [],\n            },\n            generator: false,\n            params: [],\n          },\n        ];\n      }\n    }\n  }\n\n  if (parent.isConditionalExpression()) {\n    if (path.key === 'test') {\n      return ['replace', parent, parent.node.alternate];\n    }\n\n    if (path.key === 'consequent') {\n      return ['replace', path, { type: 'Identifier', name: 'undefined' }];\n    }\n\n    if (path.key === 'alternate') {\n      return ['replace', path, { type: 'Identifier', name: 'undefined' }];\n    }\n  }\n\n  if (parent.isLogicalExpression({ operator: '&&' })) {\n    return [\n      'replace',\n      parent,\n      {\n        type: 'BooleanLiteral',\n        value: false,\n      },\n    ];\n  }\n\n  if (parent.isLogicalExpression({ operator: '||' })) {\n    return [\n      'replace',\n      parent,\n      path.key === 'left' ? parent.node.right : parent.node.left,\n    ];\n  }\n\n  if (parent.isObjectProperty()) {\n    // let's check if it is a special case with Object.defineProperty\n    const key = parent.get('key');\n    if (key.isIdentifier({ name: 'get' })) {\n      const maybeDefineProperty = parent.parentPath.parentPath;\n      if (\n        maybeDefineProperty?.isCallExpression() &&\n        maybeDefineProperty\n          .get('callee')\n          .matchesPattern('Object.defineProperty')\n      ) {\n        return findActionForNode(maybeDefineProperty);\n      }\n    }\n\n    return findActionForNode(parent);\n  }\n\n  if (parent.isTemplateLiteral()) {\n    return [\n      'replace',\n      path,\n      {\n        type: 'StringLiteral',\n        value: '',\n      },\n    ];\n  }\n\n  if (parent.isAssignmentExpression()) {\n    if (path.isAssignmentExpression()) {\n      // `foo = bar = 42` should be replaced with `foo = 42`\n      return ['replace', path, path.node.right];\n    }\n\n    return findActionForNode(parent);\n  }\n\n  if (parent.isCallExpression()) {\n    return findActionForNode(parent);\n  }\n\n  if (parent.isForInStatement({ left: path.node })) {\n    return findActionForNode(parent);\n  }\n\n  if (\n    parent.isFunctionExpression({ body: path.node }) ||\n    parent.isFunctionDeclaration() ||\n    parent.isObjectMethod() ||\n    parent.isClassMethod()\n  ) {\n    return findActionForNode(parent);\n  }\n\n  if (parent.isBlockStatement()) {\n    const body = parent.get('body');\n    if (isEmptyList(body)) {\n      return findActionForNode(parent);\n    }\n\n    if (path.listKey === 'body' && typeof path.key === 'number') {\n      if (path.key > 0) {\n        // We can check whether the previous one can be removed\n        const prevStatement = body[path.key - 1];\n        if (\n          prevStatement.isIfStatement() &&\n          prevStatement.get('consequent').isReturnStatement()\n        ) {\n          // It's `if (â€¦) return â€¦`, we can remove it.\n          return findActionForNode(prevStatement);\n        }\n      } else if (\n        body.slice(1).every((statement) => deletingNodes.has(statement))\n      ) {\n        // If it is the first statement and all other statements\n        // are marked for deletion, we can remove the whole block.\n        return findActionForNode(parent);\n      }\n    }\n  }\n\n  if (parent.isVariableDeclarator()) {\n    if (path.key === 'init' && path.isAssignmentExpression()) {\n      // We are removing `bar` in `var foo = bar = 42`. Path should be replaced with `var foo = 42`\n      return ['replace', path, path.node.right];\n    }\n\n    const init = parent.get('init');\n    if (path.key === 'id' && init.isAssignmentExpression()) {\n      // We are removing `foo` in `var foo = bar = 42`. Ignore it.\n      return null;\n    }\n\n    return findActionForNode(parent);\n  }\n\n  if (\n    parent.isExportNamedDeclaration() &&\n    ((path.key === 'specifiers' && isEmptyList(parent.get('specifiers'))) ||\n      (path.key === 'declaration' && parent.node.declaration === path.node))\n  ) {\n    return findActionForNode(parent);\n  }\n\n  for (const key of ['body', 'declarations', 'specifiers']) {\n    if (path.listKey === key && typeof path.key === 'number') {\n      const list = parent.get(key) as NodePath[];\n      if (isEmptyList(list)) {\n        return findActionForNode(parent);\n      }\n    }\n  }\n\n  if (parent.isTryStatement()) {\n    return findActionForNode(parent);\n  }\n\n  if (!path.listKey && path.key) {\n    const field = NODE_FIELDS[parent.type][path.key];\n    if (!validateField(parent.node, path.key as string, null, field)) {\n      // The parent node isn't valid without this field, so we should remove it also.\n      return findActionForNode(parent);\n    }\n  }\n\n  for (const key of [\n    'argument',\n    'block',\n    'body',\n    'callee',\n    'discriminant',\n    'expression',\n    'id',\n    'left',\n    'object',\n    'property',\n    'right',\n    'test',\n  ]) {\n    if (path.key === key && parent.get(key) === path) {\n      return findActionForNode(parent);\n    }\n  }\n\n  return ['remove', path];\n}\n\n// @babel/preset-typescript transpiles enums, but doesn't reference used identifiers.\nfunction referenceEnums(program: NodePath<Program>) {\n  /*\n   * We are looking for transpiled enums.\n   *   (function (Colors) {\n   *     Colors[\"BLUE\"] = \"#27509A\";\n   *   })(Colors || (Colors = {}));\n   */\n  program.traverse({\n    ExpressionStatement(expressionStatement) {\n      const expression = expressionStatement.get('expression');\n      if (!expression.isCallExpression()) return;\n\n      const callee = expression.get('callee');\n      const args = expression.get('arguments');\n      if (!callee.isFunctionExpression() || args.length !== 1) return;\n      const [arg] = args;\n      if (arg.isLogicalExpression({ operator: '||' })) {\n        referenceAll(arg);\n      }\n    },\n  });\n}\n\nconst fixed = new WeakSet<NodePath<Program>>();\n\nfunction removeUnreferenced(items: NodePath<Identifier | JSXIdentifier>[]) {\n  const referenced = new Set<NodePath<Identifier | JSXIdentifier>>();\n  items.forEach((item) => {\n    if (!item.node || isRemoved(item)) return;\n    const binding = getScope(item).getBinding(item.node.name);\n    if (!binding) return;\n    const hasReferences =\n      binding.referencePaths.filter((i) => !isRemoved(i)).length > 0;\n    if (hasReferences) {\n      referenced.add(item);\n      return;\n    }\n\n    const forDeleting = [binding.path, ...binding.constantViolations]\n      .map(findActionForNode)\n      .filter(isNotNull)\n      .map(getPathFromAction);\n\n    if (forDeleting.length === 0) return;\n\n    findIdentifiers(forDeleting).forEach((identifier) => {\n      referenced.add(identifier);\n    });\n\n    removeWithRelated(forDeleting);\n  });\n\n  const result = [...referenced];\n  result.sort((a, b) => a.node?.name.localeCompare(b.node?.name));\n\n  return result;\n}\n\nfunction getNodeForValue(value: unknown): Node | undefined {\n  if (typeof value === 'string') {\n    return {\n      type: 'StringLiteral',\n      value,\n    };\n  }\n\n  if (typeof value === 'number') {\n    return {\n      type: 'NumericLiteral',\n      value,\n    };\n  }\n\n  if (typeof value === 'boolean') {\n    return {\n      type: 'BooleanLiteral',\n      value,\n    };\n  }\n\n  if (value === null) {\n    return {\n      type: 'NullLiteral',\n    };\n  }\n\n  if (value === undefined) {\n    return {\n      type: 'Identifier',\n      name: 'undefined',\n    };\n  }\n\n  return undefined;\n}\n\nfunction staticEvaluate(path: NodePath | null | undefined): void {\n  if (!path) return;\n  const evaluated = path.evaluate();\n  if (evaluated.confident) {\n    const node = getNodeForValue(evaluated.value);\n    if (node) {\n      applyAction(['replace', path, node]);\n      return;\n    }\n  }\n\n  if (path.isIfStatement()) {\n    const test = path.get('test');\n    if (!test.isBooleanLiteral()) {\n      return;\n    }\n\n    const { consequent, alternate } = path.node;\n    if (test.node.value) {\n      applyAction(['replace', path, consequent]);\n    } else if (alternate) {\n      applyAction(['replace', path, alternate]);\n    } else {\n      applyAction(['remove', path]);\n    }\n  }\n}\n\nfunction applyAction(action: ReplaceAction | RemoveAction) {\n  mutate(action[1], (p) => {\n    if (isRemoved(p)) return;\n\n    const parent = p.parentPath;\n\n    if (action[0] === 'remove') {\n      p.remove();\n    }\n\n    if (action[0] === 'replace') {\n      p.replaceWith(action[2]);\n    }\n\n    staticEvaluate(parent);\n  });\n}\n\nfunction removeWithRelated(paths: NodePath[]) {\n  if (paths.length === 0) return;\n\n  const rootPath = getScope(paths[0]).getProgramParent()\n    .path as NodePath<Program>;\n\n  if (!fixed.has(rootPath)) {\n    // Some libraries don't care about bindings, references, and other staff\n    // So we have to fix the scope before we can detect unused code\n    referenceEnums(rootPath);\n    fixed.add(rootPath);\n  }\n\n  const actions: (ReplaceAction | RemoveAction)[] = paths\n    .map(findActionForNode)\n    .filter(isNotNull);\n\n  const affectedPaths = actions.map(getPathFromAction);\n\n  let referencedIdentifiers = findIdentifiers(affectedPaths, 'reference');\n  referencedIdentifiers.sort(\n    (a, b) => a.node?.name.localeCompare(b.node?.name)\n  );\n\n  const referencesOfBinding = findIdentifiers(affectedPaths, 'declaration')\n    .map((i) => (i.node && getScope(i).getBinding(i.node.name)) ?? null)\n    .filter(isNotNull)\n    .reduce(\n      (acc, i) => [...acc, ...i.referencePaths.filter(nonType)],\n      [] as NodePath[]\n    )\n    .filter(\n      (ref) =>\n        // Do not remove `export default function`\n        !ref.isExportDefaultDeclaration() ||\n        !ref.get('declaration').isFunctionDeclaration()\n    );\n\n  actions.forEach(applyAction);\n\n  removeWithRelated(referencesOfBinding);\n\n  let clean = false;\n  while (!clean && referencedIdentifiers.length > 0) {\n    const referenced = removeUnreferenced(referencedIdentifiers);\n    clean =\n      referenced.map((i) => i.node?.name).join('|') ===\n      referencedIdentifiers.map((i) => i.node?.name).join('|');\n    referencedIdentifiers = referenced;\n  }\n}\n\nfunction mutate<T extends NodePath>(path: T, fn: (p: T) => NodePath[] | void) {\n  const dereferenced = dereferenceAll(path);\n\n  const mutated = fn(path);\n\n  referenceAll(path);\n  mutated?.forEach((p) => referenceAll(p));\n\n  const dead = dereferenced.filter((p) => !isReferenced(p));\n\n  const forDeleting: NodePath[] = [];\n  dead.forEach((binding) => {\n    const assignments = [binding.path, ...binding.constantViolations];\n    assignments.forEach((assignment) => {\n      const { scope } = assignment;\n      const declared = Object.values(\n        assignment.getOuterBindingIdentifiers(false)\n      );\n      if (\n        declared.length === 1 &&\n        'name' in declared[0] &&\n        declared[0].name === binding.identifier.name\n      ) {\n        const init = assignment.get('init');\n        if (!Array.isArray(init) && init?.isAssignmentExpression()) {\n          // `const a = b = 1` â†’ `b = 1`\n          assignment.parentPath?.replaceWith({\n            type: 'ExpressionStatement',\n            expression: init.node,\n          });\n\n          const left = init.get('left');\n          if (left.isIdentifier()) {\n            // If it was forcefully referenced in the shaker\n            dereference(left);\n          }\n\n          return;\n        }\n        // Only one identifier is declared, so we can remove the whole declaration\n        forDeleting.push(assignment);\n        return;\n      }\n\n      if (\n        declared.every(\n          (identifier) =>\n            identifier.type === 'Identifier' &&\n            !scope.getBinding(identifier.name)?.referenced\n        )\n      ) {\n        // No other identifier is referenced, so we can remove the whole declaration\n        forDeleting.push(assignment);\n        return;\n      }\n\n      // We can't remove the binding, but we can remove the part of it\n      assignment.traverse({\n        Identifier(identifier) {\n          if (identifier.node.name === binding.identifier.name) {\n            const parent = identifier.parentPath;\n            if (\n              parent.isArrayPattern() &&\n              identifier.listKey === 'elements' &&\n              typeof identifier.key === 'number'\n            ) {\n              parent.node.elements[identifier.key] = null;\n            } else if (parent.isObjectProperty()) {\n              forDeleting.push(parent);\n            }\n          }\n        },\n      });\n    });\n  });\n\n  removeWithRelated(forDeleting);\n}\n\nexport { applyAction, mutate, removeWithRelated };\n"],"mappings":"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"}